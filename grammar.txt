// esta en uenfi y el [] significa opcional 

Program     ::=  #include<stdio.h> (Include)* (Func)* Main

Include     ::=  #include<Libraries> 

Libraries   ::= gaa.h | etc etc

Func        ::= Function id ( ParamList ) { Body }

function    ::= Type 
                | void

Type        ::= bool
              | SignedIntType

SignedIntType ::= [unsigned] BaseIntType // creo que aaqui puede romper con LL1 consultar al profesor mñn
                | unsigned

BaseIntType  ::= int
               | long [int]

ParamList   ::= ε
              | Param ( , Param )*

Param       ::= type id

Body        ::= (VarDec)* (Stmt)*


VarDec      ::= Type VarList ;

VarList    ::= id [= CExp] (, id [= CExp])*

CExp       ::= Exp ( ("<" | "<=" | "==" | ">" | ">=" | "!=") Exp )*

Exp        ::= Term (("+" | "-") Term)*

Term       ::= Postfix (("*" | "/") Postfix)*

Postfix    ::= Factor ( "++" | "--" )?

Factor     ::= id
             | Num
             | Bool
             | "(" CExp ")"

Bool       ::= "true" | "false"

Stmt       ::= id = CExp ;
             | printf ("%d[String]\n", Factor)
             | if (CExp) { Body [else { Body }] } 
             | while (CExp) { Body }
             | for (Assign, CExp, AssignExpr)
             | return CExp ;

Assign     ::= id = CExp

AssignExpr ::= id "=" CExp
             | id "+=" CExp
             | id "-=" CExp


Main        ::= int main () { (VarDec)* (Stmt)* } 


